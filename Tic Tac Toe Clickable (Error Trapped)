import tkinter as tk
import random

# Initialize the game board
board = [[" " for _ in range(3)] for _ in range(3)]

# Function to check if any player has won
def check_winner():
    # Check rows
    for row in board:
        if row[0] == row[1] == row[2] != " ":
            return row[0]

    # Check columns
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != " ":
            return board[0][col]

    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] != " ":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != " ":
        return board[0][2]

    # No winner
    return None

# Function to check if the board is full
def is_board_full():
    for row in board:
        if " " in row:
            return False
    return True

# Function for the computer's move
def computer_move():
    # Check if the computer can win in the next move
    for row in range(3):
        for col in range(3):
            if board[row][col] == " ":
                board[row][col] = "O"
                if check_winner() == "O":
                    return

                # Undo the move
                board[row][col] = " "

    # Check if the player can win in the next move
    for row in range(3):
        for col in range(3):
            if board[row][col] == " ":
                board[row][col] = "X"
                if check_winner() == "X":
                    board[row][col] = "O"
                    return

                # Undo the move
                board[row][col] = " "

    # Choose a random move
    while True:
        row = random.randint(0, 2)
        col = random.randint(0, 2)
        if board[row][col] == " ":
            board[row][col] = "O"
            return

# Function to handle player's move
def handle_click(row, col):
    if board[row][col] == " ":
        board[row][col] = "X"
        if not is_board_full() and not check_winner():
            computer_move()

        update_board()
        winner = check_winner()
        if winner:
            message = f"Player {winner} wins!"
            label.config(text=message)
        elif is_board_full():
            label.config(text="It's a tie!")

# Function to update the game board display
def update_board():
    for row in range(3):
        for col in range(3):
            button_texts[row][col].set(board[row][col])

# Create the main window
window = tk.Tk()
window.title("Tic Tac Toe")

# Create a list to store button texts
button_texts = [[tk.StringVar() for _ in range(3)] for _ in range(3)]

# Create buttons for the game board
buttons = []
for row in range(3):
    button_row = []
    for col in range(3):
        button = tk.Button(window, textvariable=button_texts[row][col], font=("Arial", 20), width=4, height=2,
                           command=lambda r=row, c=col: handle_click(r, c))
        button.grid(row=row, column=col, padx=5, pady=5)
        button_row.append(button)
    buttons.append(button_row)

# Create a label for game status
label = tk.Label(window, text="", font=("Arial", 14))
label.grid(row=3, column=0, columnspan=3, pady=10)

# Start the GUI event loop
window.mainloop()
